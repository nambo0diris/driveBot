import {Composer, Markup, Scenes} from "telegraf";
import db_connect from "../libs/db_connect";
import get_random_data from "../data_generator/get_random_data";
import CyrillicToTranslit from "cyrillic-to-translit-js";
import id_code from "../data_generator/id_code";
import passport_number from "../data_generator/passport_number";
// @ts-ignore
import { v4 as uuidv4 } from 'uuid';
import serial_number from "../data_generator/serial_number";
import convert_to_jpeg_mask from "../libs/convert_to_jpeg";
import * as fs from "fs";
import download_image from "../libs/download";
import {ICreatePayment, YooCheckout} from "@a2seven/yoo-checkout";
import {login} from "telegraf/typings/button";
let newDBconnect: db_connect;
// @ts-ignore
const cyrillicToTranslit = new CyrillicToTranslit();
//step 0
const chooseCountry = new Composer();
chooseCountry.on("callback_query", async (ctx) => {
    // @ts-ignore
    newDBconnect = new db_connect(ctx.id);
    await ctx.answerCbQuery();
    await ctx.replyWithHTML("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", Markup.inlineKeyboard([
        [Markup.button.callback("–§—Ä–∞–Ω–∏—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "france")],
        [Markup.button.callback("–ê–Ω–≥–ª–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "united_kingdom")],
        [Markup.button.callback("–ú–µ–∫—Å–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "mexico")],
        [Markup.button.callback("–†–æ—Å—Å–∏—è", "russia")],
        [Markup.button.callback("–£–∫—Ä–∞–∏–Ω–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "ukraine")],
        [Markup.button.callback("–°–®–ê (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "united_states")],
        [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
    ]))
    // @ts-ignore
    return ctx.wizard.selectStep(1)
})

// step 1
const description = new Composer();
description.action("russia", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.country = "Russia";
        // @ts-ignore
        await ctx.replyWithHTML("–í —Å—Ç–æ–∏–æ–º—Å—Ç—å –≤—Ö–æ–¥–∏—Ç —Ç—Ä–∏ –≤–∏–¥–∞ –º–∞–∫–µ—Ç–æ–≤: " +
            "- –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç (2 —Ñ–∞–π–ª–∞) " +
            "- –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∞ —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏ (1 —Ñ–∞–π–ª) " +
            "- –°—É–≤–µ–Ω–∏—Ä–Ω—ã–µ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ –Ω–∞ –ø–ª–∞—Å—Ç–∏–∫–µ (2 —Ñ–∞–π–ª–∞)",
            Markup.inlineKeyboard([
                [Markup.button.callback("üá∑üá∫ –†–§ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ","only_ru" )],
                [Markup.button.callback("üá∑üá∫ –†–§ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ + üá™üá∫ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ", "ru_eu")],
                [Markup.button.callback("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑—Ü—ã", "look_examples")]
            ]));
        // @ts-ignore
        return ctx.wizard.selectStep(2);
    } catch (e) {
        console.log(e)
    }
})

// step 2
const getDateOfBirthStep = new Composer();
getDateOfBirthStep.action("look_examples", async (ctx) => {
    // @ts-ignore
    await ctx.answerCbQuery();
    await ctx.replyWithDocument({ source: `/root/driveBot/examples/international_driver_license/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
    await ctx.replyWithDocument({ source: `/root/driveBot/examples/international_driver_license/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
    await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/full/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
    await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/full/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
    await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/short/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` },
        Markup.inlineKeyboard(
            [
                [Markup.button.callback("‚≠ê –ù–∞–∑–∞–¥", "prev_step")],
                [Markup.button.callback("üëâ –í –Ω–∞—á–∞–ª–æ", "to_start")]
            ]
        ));
})
getDateOfBirthStep.on("callback_query", async ctx => {
    await ctx.answerCbQuery();
    // @ts-ignore
    ctx.wizard.state.type = ctx.update.callback_query["data"];
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
    await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –î–∞—Ç—É –†–æ–∂–¥–µ–Ω–∏—è üéÇ (—Ñ–æ—Ä–º–∞—Ç: <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>)",
        Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "only_ru") {
        // @ts-ignore
        return ctx.wizard.selectStep(6);
    }
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "ru_eu") {
        // @ts-ignore
        return ctx.wizard.selectStep(3);
    }
});

// 3
const getSex = new Composer();
getSex.on("text", async(ctx) => {

    try {
        // @ts-ignore
        ctx.wizard.state.date_of_birth = ctx.message.text.trim();
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª", Markup.inlineKeyboard([
            [Markup.button.callback("ü¶∏‚Äç‚ôÇÔ∏è–ú","M"), Markup.button.callback("ü¶∏‚Äç‚ôÄÔ∏è–ñ","F")],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))
        // @ts-ignore
        return ctx.wizard.selectStep(4);
    } catch (e) {
        console.log(e)
    }
})
getSex.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
// // 4
const getEyesColor = new Composer();
getEyesColor.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getEyesColor.on("callback_query", async(ctx) => {
    // @ts-ignore
    let sex = ctx.update.callback_query["data"];
    try {
        // @ts-ignore
        ctx.wizard.state.sex = sex;
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –≥–ª–∞–∑ üëÄ", Markup.inlineKeyboard([
            [Markup.button.callback("‚ö™ –°–µ—Ä—ã–µ","BLUE"),Markup.button.callback("üü¢ –ó–µ–ª–µ–Ω—ã–µ","GREEN") ],
            [Markup.button.callback("üü° –ñ–µ–ª—Ç—ã–µ", "YELLOW"), Markup.button.callback("üîµ –°–∏–Ω–∏–µ", "BLUE"), Markup.button.callback("üü§ –ö–∞—Ä–∏–µ","BROWN")],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))
        // @ts-ignore
        return ctx.wizard.selectStep(5);
    } catch (e) {
        console.log(e)
    }
})

// 5
const getHeight = new Composer();
getHeight.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getHeight.on("callback_query", async (ctx) => {

    // @ts-ignore
    let eyes_color = ctx.update.callback_query["data"];
    try {
        // @ts-ignore
        ctx.wizard.state.eyes = eyes_color;
        await ctx.replyWithHTML("<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: 183</b>",  Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(6);
    } catch (e) {
        console.log(e)
    }
})


// 6
const getNameStep = new Composer();
getNameStep.action("start_again", async ctx => {
    await ctx.answerCbQuery();
    // @ts-ignore
    await ctx.wizard.selectStep(0)
})
getNameStep.on("text", async (ctx) => {
    try {
        if (ctx.message.text.split('.').length === 3) {
            // @ts-ignore
            ctx.wizard.state.date_of_birth = ctx.message.text.trim();
        } else {
            // @ts-ignore
            ctx.wizard.state.height = ctx.message.text;
        }
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä: <b>–ü—É—à–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á</b>",  Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(7);
    } catch (e) {
        console.log(e)
    }
})


// 7
const isRandomAll = new Composer();
isRandomAll.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
isRandomAll.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.last_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[0]).toUpperCase();
        // @ts-ignore
        ctx.wizard.state.first_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[1]).toUpperCase();
        // @ts-ignore
        ctx.wizard.state.second_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[2]).toUpperCase();

        await ctx.replyWithHTML("–ú—ã –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—É–Ω–∫—Ç—ã –∑–∞ –≤–∞—Å <b>—Å–ª—É—á–∞–π–Ω—ã–º–∏</b> –¥–∞–Ω–Ω—ã–º–∏", Markup.inlineKeyboard([
            [Markup.button.callback("üñã –ó–∞–ø–æ–ª–Ω—é —Å–∞–º","write_myself"), Markup.button.callback("üî£ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "random_data") ],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))

        // @ts-ignore
        return ctx.wizard.selectStep(8);
    } catch (e) {
        console.log(e)
    }
})



// 8
const getCityOfBirth = new Composer();
getCityOfBirth.action("start_again", async ctx => {
    try {
        // @ts-ignore
        if (ctx.update.callback_query["data"] === "start_again") {
            await ctx.answerCbQuery();
            // @ts-ignore
            await ctx.wizard.selectStep(0);
        }
    } catch (e) {
        console.log(e)
    }

})
getCityOfBirth.action("confirm", async ctx => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.id_code = id_code();
        // @ts-ignore
        ctx.wizard.state.passport_number = passport_number();
        // @ts-ignore
        ctx.wizard.state.national_driver_license = passport_number();

        await ctx.replyWithHTML("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ 3:4. " +
            "–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.</b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(16);
    } catch (e) {
        console.log(e)
    }

})
getCityOfBirth.on("callback_query", async (ctx) => {
    try {
        // @ts-ignore
        if (ctx.update.callback_query["data"] === "random_data" || ctx.update.callback_query["data"] === "generate_again") {

            const fake_data = await get_random_data();

            // @ts-ignore
            const {city_of_birth, country_of_birth, living_index, living_country, living_city, living_street, house_number, subject_id} = fake_data;
            // @ts-ignore
            const first_name = ctx.wizard.state.first_name;
            // @ts-ignore
            const last_name = ctx.wizard.state.last_name;
            // @ts-ignore
            const second_name = ctx.wizard.state.second_name;
            // @ts-ignore
            const sex = ctx.wizard.state.sex;
            // @ts-ignore
            const eyes = ctx.wizard.state.eyes;
            // @ts-ignore
            const height = ctx.wizard.state.height;
            // @ts-ignore
            const date_of_birth = ctx.wizard.state.date_of_birth;
            // @ts-ignore
            ctx.wizard.state.subject_id = subject_id;
            // @ts-ignore
            ctx.wizard.state.user_id = ctx.update.callback_query.message.chat.id;
            // @ts-ignore
            ctx.wizard.state.city_of_birth = city_of_birth;
            // @ts-ignore
            ctx.wizard.state.country_of_birth = country_of_birth;
            // @ts-ignore
            ctx.wizard.state.living_index = living_index;
            // @ts-ignore
            ctx.wizard.state.living_country = living_country;
            // @ts-ignore
            ctx.wizard.state.living_city = living_city;
            // @ts-ignore
            ctx.wizard.state.living_street = living_street;
            // @ts-ignore
            ctx.wizard.state.house_number = house_number;
            // @ts-ignore
            ctx.wizard.state.subject_id = subject_id;

            await ctx.replyWithHTML(`<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
                    –ò–º—è: ${first_name}
                    –§–∞–º–∏–ª–∏—è: ${last_name}
                    –û—Ç—á–µ—Å—Ç–≤–æ: ${second_name}
                    –ü–æ–ª: ${sex || "—ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"}
                    –¶–≤–µ—Ç –≥–ª–∞–∑: ${eyes || "—ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"}
                    –†–æ—Å—Ç: ${height || "—ç—Ç–æ—Ç –ø—É–Ω–∫—Ç –¥–ª—è –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞"}
                    –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${date_of_birth}
                    –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${city_of_birth}, ${country_of_birth}
                    –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ${living_index}, ${living_country}, ${living_city}, ${living_street}, ${house_number}
                    –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è: ${subject_id}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å–µ –≤–µ—Ä–Ω–æ", "confirm"), Markup.button.callback("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "generate_again")],
                    [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
                ])
            )
        }


        // @ts-ignore
        if (ctx.update.callback_query["data"] === "write_myself") {
            await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ä–æ–¥–∏–ª–∏—Å—å. –ü—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>",
                Markup.inlineKeyboard([
                    [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
                ]))
            // @ts-ignore
            return ctx.wizard.selectStep(9);
        }
        // // @ts-ignore
        // return ctx.wizard.selectStep(7);
    } catch (e) {
        console.log(e)
    }
})

// 9
const getCountryOfBirth = new Composer();
getCountryOfBirth.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getCountryOfBirth.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.city_of_birth = cyrillicToTranslit.transform(ctx.message.text.trim()).toUpperCase()
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>–†–æ—Å—Å–∏—è –∏–ª–∏ –°–°–°–† </b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(10);
    } catch (e) {
        console.log(e)
    }
})

// 10
const getLivingStreet = new Composer();
getLivingStreet.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getLivingStreet.on("text", async (ctx) => {
    let country = ""
    try {
        if (ctx.message.text.trim().toLowerCase() === "—Ä–æ—Å—Å–∏—è") {
            country = "Russia"
        } else if (ctx.message.text.trim().toLowerCase() === "—Å—Å—Å—Ä") {
            country = "USSR"
        } else {
            country = cyrillicToTranslit.transform(ctx.message.text).toUpperCase();
        }
        // @ts-ignore
        ctx.wizard.state.country_of_birth = country

        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞</b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(11);
    } catch (e) {
        console.log(e)
    }
})

// 11
const getHouseNumber = new Composer();
getHouseNumber.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getHouseNumber.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_street = cyrillicToTranslit.transform(ctx.message.text).toUpperCase()
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞. –ü—Ä–∏–º–µ—Ä: <b>34/2</b>")
        // @ts-ignore
        return ctx.wizard.selectStep(12);
    } catch (e) {
        console.log(e)
    }
})

// 12
const getLivingIndex = new Composer();
getLivingIndex.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getLivingIndex.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.house_number = ctx.message.text;
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å. –ü—Ä–∏–º–µ—Ä: <b>192168</b>")
        // @ts-ignore
        return ctx.wizard.selectStep(13);
    } catch (e) {
        console.log(e)
    }
})

// 13
const getLivingCity = new Composer();
getLivingCity.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getLivingCity.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_country = "RUSSIA";
        // @ts-ignore
        ctx.wizard.state.living_index = ctx.message.text.toUpperCase();
        await newDBconnect.updateOrder({key:"living_index", value:`${ctx.message.text.toUpperCase()}`});
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>")
        // @ts-ignore
        return ctx.wizard.selectStep(14);
    } catch (e) {
        console.log(e)
    }
})



// 14
const getSubjectIdAndMakeSerialNumber = new Composer();
getSubjectIdAndMakeSerialNumber.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getSubjectIdAndMakeSerialNumber.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_city = cyrillicToTranslit.transform(ctx.message.text).toUpperCase();
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π –ì–ò–ë–î–î-–∫–æ–¥ —Å—É–±—å–µ–∫—Ç–∞ –†–§, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ.<a href='https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B4%D1%8B_%D1%81%D1%83%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%B9_%D0%A4%D0%B5%D0%B4%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8'>–£–∑–Ω–∞—Ç—å –∫–æ–¥ –º–æ–∂–Ω–æ —Ç—É—Ç</a>")
        // @ts-ignore
        return ctx.wizard.selectStep(15);
    } catch (e) {
        console.log(e)
    }
})


// 15
const getApprove = new Composer();
getApprove.action("start_again", async ctx => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "start_again") {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    }
})
getApprove.on("text", async (ctx) => {
    try {

        // @ts-ignore
        ctx.wizard.state.subject_id = serial_number(ctx.message.text);
        // @ts-ignore
        const { type, first_name, last_name, second_name, date_of_birth, city_of_birth, house_number, subject_id, country_of_birth, living_index, living_country, living_city, living_street, sex, eyes, height} = ctx.wizard.state;
        // @ts-ignore
        if (type === "ru_eu"){
            await ctx.replyWithHTML(`
                 <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
                 –ò–º—è: ${first_name.toUpperCase()},
                 –§–∞–º–∏–ª–∏—è: ${last_name.toUpperCase()},
                 –û—Ç—á–µ—Å—Ç–≤–æ: ${second_name.toUpperCase()},
                 –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${date_of_birth},
                 –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${city_of_birth.toUpperCase()}, ${country_of_birth.toUpperCase()}
                 –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ${living_index.toUpperCase()}, ${living_country.toUpperCase()}, ${living_city.toUpperCase()}, ${living_street.toUpperCase()}, ${house_number},
                 –ü–æ–ª: ${sex.toUpperCase()}
                 –¶–≤–µ—Ç –≥–ª–∞–∑: ${eyes.toUpperCase()}
                 –†–æ—Å—Ç: ${height}
                 –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è:${subject_id}`,

                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å—ë –≤–µ—Ä–Ω–æ","right"),Markup.button.callback("‚ùå –ù–µ –≤–µ—Ä–Ω–æ","wrong") ]
                ])
            )
        } else {
            await ctx.replyWithHTML(`<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
                 –ò–º—è: ${first_name.toUpperCase()},
                 –§–∞–º–∏–ª–∏—è: ${last_name.toUpperCase()},
                 –û—Ç—á–µ—Å—Ç–≤–æ: ${second_name.toUpperCase()},
                 –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${date_of_birth},
                 –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: ${city_of_birth.toUpperCase()}, ${country_of_birth.toUpperCase()}
                 –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ${living_index}, ${living_country.toUpperCase()}, ${living_city.toUpperCase()}, ${living_street.toUpperCase()}, ${house_number}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å—ë –≤–µ—Ä–Ω–æ","right"),Markup.button.callback("‚ùå –ù–µ –≤–µ—Ä–Ω–æ","wrong") ]
                ])
            )
        }

        // @ts-ignore
        return ctx.wizard.selectStep(16);
    } catch (e) {
        console.log(e)
    }
})


// 16
const getPhoto = new Composer();
getPhoto.action("start_again", async ctx => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }

});

getPhoto.action("make_payment", async ctx => {
    try {
        await ctx.answerCbQuery("make_payment");
        await ctx.answerCbQuery();
        const checkout = new YooCheckout({ shopId: '959346', secretKey: 'live_Ov9tXrXrZAyBU840C2LbZnJbgFb58937zgoq65MazK4' });
        const idempotenceKey = uuidv4();
        const createPayload: ICreatePayment = {
            amount: {
                value: '400.00',
                currency: 'RUB'
            },
            payment_method_data: {
                type: 'bank_card',

            },
            confirmation: {
                type: 'redirect',
                locale: "ru_RU",
                return_url: "https://t.me/xeroxDoc_bot",
            },
            description: "–ë—É—Ç–∞—Ñ–æ—Ä–∏—è - –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
            capture: true,
            receipt: {
                customer: {
                    email: "anz77or@gmail.com",
                    phone: "+79633442711",
                },
                items: [
                    {
                        payment_subject:"service",
                        payment_mode: "full_payment",
                        vat_code: 1,
                        quantity: "1",
                        description: "–ë—É—Ç–∞—Ñ–æ—Ä–∏—è - –í–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –£–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ",
                        amount: {
                            value: "400.00",
                            currency: "RUB",
                        },
                    }
                ],
            },
        };

        try {

            const payment = await checkout.createPayment(createPayload, idempotenceKey);
            const payment_id = payment.id;
            // @ts-ignore
            ctx.wizard.state.payment_id = payment.id;
            const confirmation_url = payment.confirmation.confirmation_url ? payment.confirmation.confirmation_url : 'empty';

            if (confirmation_url != null) {
                await ctx.replyWithHTML(confirmation_url).then(async () => {
                    let payment_result = await checkout.getPayment(payment_id);
                    let counter = 0;
                    async function getPayment() {
                        payment_result = await checkout.getPayment(payment_id);
                        console.log(payment_result.status)
                        if (payment_result.status === "succeeded") {
                            clearInterval(interval_id);
                            // @ts-ignore
                            await ctx.replyWithHTML("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –°–ø–∞—Å–∏–±–æ! –í —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏.");
                            // @ts-ignore
                            await convert_to_jpeg_mask(ctx.wizard.state).then( async () => {
                                // @ts-ignore
                                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.update.callback_query.from.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
                                // @ts-ignore
                                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.update.callback_query.from.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
                                // @ts-ignore
                                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.update.callback_query.from.id}/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` });
                                // @ts-ignore
                                if (ctx.wizard.state.type === "ru_eu"){
                                    // @ts-ignore
                                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.update.callback_query.from.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
                                    // @ts-ignore
                                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.update.callback_query.from.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
                                }
                            });
                        }
                        if (counter === 30 && payment_result.status !== "succeeded") {
                            clearInterval(interval_id);
                            // @ts-ignore
                            await ctx.replyWithHTML("–ü–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. " +
                                "–ï—Å–ª–∏ —É –≤–∞—Å —Å–ø–∏—Å–∞–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏—à–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", Markup.inlineKeyboard([
                                [Markup.button.callback("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É","support" )],
                                [Markup.button.callback("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ","start_again" )],
                            ]));
                        }
                        counter++;
                    }
                    const interval_id = setInterval(getPayment, 20000);
                });
            }
        } catch (error) {
            console.error(error);
        }
    } catch (e) {
        console.log(e)
    }

});

getPhoto.action("wrong", async ctx => {
    try {
        await ctx.answerCbQuery();
        await ctx.replyWithHTML("<b>–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)'</b>",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]));
        // @ts-ignore
        return ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }
});

getPhoto.on("photo", async (ctx) => {
    // @ts-ignore
    const picture = ctx.message.photo[2].file_id || ctx.message.photo[1].file_id || ctx.message.photo[0].file_id;
    console.log("picture " + picture)

    const fileUrl = await ctx.telegram.getFileLink(picture);
    console.log("fileUrl " + fileUrl)
    try {
        fs.stat(`/root/driveBot/temp/users/${ctx.message.chat.id}`, async (err) => {
            if (!err) {
                console.log("–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
                await download_image(fileUrl.href, `/root/driveBot/temp/users/${ctx.message.chat.id}/${ctx.message.chat.id}.jpg`);
            } else if (err.code === 'ENOENT') {
                console.log('–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç');
                fs.mkdir(`/root/driveBot/temp/users/${ctx.message.chat.id}`, async (err) => {
                    if (err)
                        throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
                    console.log("–ø–∞–ø–∫—É —Å–æ–∑–¥–∞–ª")
                    await download_image(fileUrl.href, `/root/driveBot/temp/users/${ctx.message.chat.id}/${ctx.message.chat.id}.jpg`);
                });
            }
        });
        // @ts-ignore
        console.log(ctx.wizard.state)
        // @ts-ignore
        await convert_to_jpeg_mask(ctx.wizard.state, "example").then( async () => {
            // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å E:///myProjects/driveBot/temp/users/${ctx.message.chat.id}/.jpg
            // @ts-ignore
            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
            // @ts-ignore
            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
            // @ts-ignore
            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` });
            // @ts-ignore
            if (ctx.wizard.state.type === "ru_eu"){
                // @ts-ignore
                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
                // @ts-ignore
                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
            }
        });
        await ctx.replyWithHTML(`–ï—Å–ª–∏ –æ–±—Ä–∞–∑—Ü—ã –≤—ã—à–ª–∏ —Ö–æ—Ä–æ—à–æ, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>. –í —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏. –ß—Ç–æ–±—ã üëâ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞) –∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É`,
            Markup.inlineKeyboard([
                [Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å","make_payment"), Markup.button.callback("üé≠ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ","update_photo")],
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
            ])
        )
    } catch (e) {
        console.log(e)
    }
})
getPhoto.action("right", async ctx => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.id_code = id_code();
        // @ts-ignore
        ctx.wizard.state.passport_number = passport_number();
        // @ts-ignore
        ctx.wizard.state.national_driver_license = passport_number();

        await ctx.replyWithHTML("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ 3:4. " +
            "–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.</b>",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
    } catch (e) {
        console.log(e)
    }
});
getPhoto.action("update_photo", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.id_code = id_code();
        // @ts-ignore
        ctx.wizard.state.passport_number = passport_number();
        // @ts-ignore
        ctx.wizard.state.national_driver_license = passport_number();
        await ctx.replyWithHTML("<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ 3:4. " +
            "–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.</b>",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
    } catch (e) {
        console.log(e)
    }
});
getPhoto.action("generate_again", async ctx => {
    try {
        await ctx.answerCbQuery();
        await ctx.reply("–ì–µ–Ω–µ—Ä—é...");
        // @ts-ignore
        return ctx.wizard.selectStep(7);
    } catch (e) {
        console.log(e)
    }
});

// 17
const getAnswer = new Composer();
getAnswer.action("start_again", async ctx => {
    await ctx.answerCbQuery();
    // @ts-ignore
    await ctx.wizard.selectStep(0);
})


// 18
const sendFinalData = new Composer();
sendFinalData.action("start_again", async ctx => {
    await ctx.answerCbQuery("update_photo");
    // @ts-ignore
    await ctx.wizard.selectStep(0);
})

sendFinalData.on('text', async (ctx) => {
    try {

    } catch (e) {
        console.log(e)
    }
})




const make_driver_license_scene = new Scenes.WizardScene(
    "make_driver_license_scene",
    chooseCountry,
    description,
    getDateOfBirthStep,
    getSex,
    getEyesColor,
    getHeight,
    getNameStep,
    isRandomAll,
    getCityOfBirth,
    getCountryOfBirth,
    getLivingStreet,
    getHouseNumber,
    getLivingIndex,
    getLivingCity,
    getSubjectIdAndMakeSerialNumber,
    getApprove,
    getPhoto,
    getAnswer,
    sendFinalData,
)

export default make_driver_license_scene;