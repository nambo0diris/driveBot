import {Composer, Markup, Scenes} from "telegraf";
import db_connect from "../libs/db_connect";
import get_random_data from "../data_generator/get_random_data";
import CyrillicToTranslit from "cyrillic-to-translit-js";
import id_code from "../data_generator/id_code";
import passport_number from "../data_generator/passport_number";
// @ts-ignore
import { v4 as uuidv4 } from 'uuid';
import serial_number from "../data_generator/serial_number";
import convert_to_jpeg from "../libs/convert_to_jpeg";
import * as fs from "fs";
import download_image from "../libs/download";
import {YooCheckout} from "@a2seven/yoo-checkout";
import {bank_card_payload} from "../payment_payloads/bank_card";
import {sberbank} from "../payment_payloads/sberbank";
import random_signature from "../data_generator/random_signature";
import {get_expire_date} from "../data_generator/get_expire_date";
var newDBconnect: db_connect;
// @ts-ignore
const cyrillicToTranslit = new CyrillicToTranslit();

const to_start = async (ctx:any) => {
    try {
        await newDBconnect.updateOrder({key: "payment_status", value: "fail"});
        await newDBconnect.updateOrder({key: "status", value: "fail"});
        await ctx.answerCbQuery("to_start");
        // @ts-ignore
        await ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }
}
const random_data = async (ctx:any) => {
    await ctx.answerCbQuery();
    try {
        const fake_data = await get_random_data();
        // @ts-ignore
        const {city_of_birth, country_of_birth, living_index, living_country, living_city, living_street, house_number, subject_id} = fake_data;
        // @ts-ignore
        const first_name = ctx.wizard.state.first_name;
        // @ts-ignore
        const last_name = ctx.wizard.state.last_name;
        // @ts-ignore
        const second_name = ctx.wizard.state.second_name;
        // @ts-ignore
        const sex = ctx.wizard.state.sex;
        // @ts-ignore
        const eyes = ctx.wizard.state.eyes;
        // @ts-ignore
        const height = ctx.wizard.state.height;
        // @ts-ignore
        const date_of_birth = ctx.wizard.state.date_of_birth;
        // @ts-ignore
        ctx.wizard.state.subject_id = subject_id;
        // @ts-ignore
        ctx.wizard.state.city_of_birth = city_of_birth;
        // @ts-ignore
        ctx.wizard.state.country_of_birth = country_of_birth;
        // @ts-ignore
        ctx.wizard.state.living_index = living_index;
        // @ts-ignore
        ctx.wizard.state.living_country = living_country;
        // @ts-ignore
        ctx.wizard.state.living_city = living_city;
        // @ts-ignore
        ctx.wizard.state.living_street = living_street;
        // @ts-ignore
        ctx.wizard.state.house_number = house_number;
        // @ts-ignore
        ctx.wizard.state.subject_id = subject_id;
        // @ts-ignore
        ctx.wizard.state.subject_id_number = subject_id.split(" ")[0];
        // @ts-ignore
        if (ctx.wizard.state.type === "only_ru") {
            await ctx.replyWithHTML(
                `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
<b>–ò–º—è</b>: ${first_name.toUpperCase()}
<b>–§–∞–º–∏–ª–∏—è</b>: ${last_name.toUpperCase()}
<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: ${second_name.toUpperCase()}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: ${date_of_birth}
<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: ${country_of_birth.toUpperCase()}, ${city_of_birth.toUpperCase()}
<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: ${living_country.toUpperCase()}, ${living_city.toUpperCase()}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å–µ –≤–µ—Ä–Ω–æ", "confirm"), Markup.button.callback("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "generate_again")],
                    [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
                ])
            )
        }
        // @ts-ignore
        if (ctx.wizard.state.type === "ru_eu") {
            await ctx.replyWithHTML(`<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
<b> –ò–º—è </b>: ${first_name.toUpperCase()}
<b> –§–∞–º–∏–ª–∏—è </b>: ${last_name.toUpperCase()}
<b> –û—Ç—á–µ—Å—Ç–≤–æ </b>: ${second_name.toUpperCase()}
<b> –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è </b>: ${date_of_birth}
<b> –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è </b>: ${country_of_birth.toUpperCase()}, ${city_of_birth.toUpperCase()}
<b> –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è </b>: ${living_country.toUpperCase()}, ${living_city.toUpperCase()}, ${living_street.toUpperCase()}, ${house_number}, ${living_index.toUpperCase()}
<b> –ü–æ–ª </b>: ${sex.toUpperCase()}
<b> –¶–≤–µ—Ç –≥–ª–∞–∑ </b>: ${eyes.toUpperCase()}
<b> –†–æ—Å—Ç </b>: ${height}
<b> –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è </b>:${subject_id}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å–µ –≤–µ—Ä–Ω–æ", "confirm"), Markup.button.callback("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "generate_again")],
                    [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
                ])
            )
        }
    } catch (e) {
        console.log(e)
    }

}

//step 0
const chooseCountry = new Composer();
chooseCountry.action("russia", async (ctx) => {
    // @ts-ignore
    newDBconnect = new db_connect(ctx.wizard.state.user_id);
    await newDBconnect.updateOrder({key: "payment_status", value: "fail"});
    await newDBconnect.updateOrder({key: "payment_status", value: "fail"});
    try {
        // @ts-ignore
        ctx.wizard.state.living_country = "RUSSIA";
        // @ts-ignore
        // await ctx.replyWithVideo("/root/driveBot/examples/example.mp4");
        await ctx.replyWithHTML(`<b>–í —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Ö–æ–¥–∏—Ç –¥–≤–∞ –≤–∏–¥–∞ –º–∞–∫–µ—Ç–æ–≤:</b>
- –ë—É—Ç–∞—Ñ–æ—Ä—Å–∫–∏–µ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∞ <b>–ø–æ–ª–Ω—ã–π —Ä–∞–∑–≤–æ—Ä–æ—Ç</b> (2 —Ñ–∞–π–ª–∞)
- –ë—É—Ç–∞—Ñ–æ—Ä—Å–∫–∏–µ –†–æ—Å—Å–∏–π—Å–∫–∏–µ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø—Ä–∞–≤–∞ <b>—Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ —á–∞—Å—Ç–∏</b> (1 —Ñ–∞–π–ª)
–í –∫–∞—á–µ—Å—Ç–≤–µ <b>–ø–æ–¥–∞—Ä–∫–∞</b> –º—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –≤–∞–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–¥–µ–ª–∞—Ç—å –±—É—Ç–∞—Ñ–æ—Ä–∏—é –µ–≤—Ä–æ–ø–µ–π—Å–∫–æ–≥–æ –æ–±—Ä–∞–∑—Ü–∞ (–Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤)`,
            Markup.inlineKeyboard([
                [Markup.button.callback("üá∑üá∫ –†–§ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ","only_ru" )],
                [Markup.button.callback("üá∑üá∫ –†–§ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ + üá™üá∫ –µ–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ", "ru_eu")],
                [Markup.button.callback("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–±—Ä–∞–∑—Ü—ã", "look_examples")]
            ]));

        // @ts-ignore
        return ctx.wizard.selectStep(1);
    } catch (e) {
        console.log(e)
    }
})
chooseCountry.on("callback_query", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.user_id = ctx.update.callback_query.message.chat.id;
        // @ts-ignore
        await ctx.answerCbQuery();
        await ctx.replyWithHTML("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É", Markup.inlineKeyboard([
            [Markup.button.callback("–§—Ä–∞–Ω–∏—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "france")],
            [Markup.button.callback("–ê–Ω–≥–ª–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "united_kingdom")],
            [Markup.button.callback("–ú–µ–∫—Å–∏–∫–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "mexico")],
            [Markup.button.callback("–†–æ—Å—Å–∏—è", "russia")],
            [Markup.button.callback("–£–∫—Ä–∞–∏–Ω–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "ukraine")],
            [Markup.button.callback("–°–®–ê (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)", "united_states")],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
        ]))
    } catch (e) {
        console.log(e)
    }
})

// step 1
const getDateOfBirthStep = new Composer();
getDateOfBirthStep.action("look_examples", async (ctx) => {
    try {
        // @ts-ignore
        await ctx.answerCbQuery();
        await ctx.replyWithDocument({ source: `/root/driveBot/examples/international_driver_license/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
        await ctx.replyWithDocument({ source: `/root/driveBot/examples/international_driver_license/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
        await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/full/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
        await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/full/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
        await ctx.replyWithDocument({ source: `/root/driveBot/examples/russian_international_driving_permit/short/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` },
            Markup.inlineKeyboard(
                [
                    [Markup.button.callback("‚≠ê –ù–∞–∑–∞–¥", "prev_step")],
                    [Markup.button.callback("üëâ –í –Ω–∞—á–∞–ª–æ", "to_start")]
                ]
            ));
    } catch (e) {
        console.log(e)
    }
});
getDateOfBirthStep.action("start_again", to_start);
getDateOfBirthStep.action("only_ru", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.type = ctx.update.callback_query["data"];
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –î–∞—Ç—É –†–æ–∂–¥–µ–Ω–∏—è üéÇ (—Ñ–æ—Ä–º–∞—Ç: <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>)",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(5);
    } catch (e) {
        console.log(e)
    }
})
getDateOfBirthStep.action("ru_eu", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.type = ctx.update.callback_query["data"];
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –î–∞—Ç—É –†–æ–∂–¥–µ–Ω–∏—è üéÇ (—Ñ–æ—Ä–º–∞—Ç: <b>–¥–¥.–º–º.–≥–≥–≥–≥</b>)",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(2);
    } catch (e) {
        console.log(e)
    }
})
getDateOfBirthStep.action("prev_step", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        return ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }
});

getDateOfBirthStep.action("to_start", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        return ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }
});


// 2
const getSex = new Composer();
getSex.action("start_again", to_start);
getSex.on("text", async(ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.date_of_birth = ctx.message.text.trim();
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª", Markup.inlineKeyboard([
            [Markup.button.callback("ü¶∏‚Äç‚ôÇÔ∏è–ú","M"), Markup.button.callback("ü¶∏‚Äç‚ôÄÔ∏è–ñ","F")],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))
        // @ts-ignore
        return ctx.wizard.selectStep(3);
    } catch (e) {
        console.log(e)
    }
})


// 3
const getEyesColor = new Composer();
getEyesColor.action("start_again", to_start);
getEyesColor.on("callback_query", async(ctx) => {
    // @ts-ignore
    let sex = ctx.update.callback_query["data"];
    try {
        // @ts-ignore
        ctx.wizard.state.sex = sex;
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —Ü–≤–µ—Ç –≥–ª–∞–∑ üëÄ", Markup.inlineKeyboard([
            [Markup.button.callback("‚ö™ –°–µ—Ä—ã–µ","GRAY"),Markup.button.callback("üü¢ –ó–µ–ª–µ–Ω—ã–µ","GREEN") ],
            [Markup.button.callback("üîµ –°–∏–Ω–∏–µ", "BLUE"), Markup.button.callback("üü§ –ö–∞—Ä–∏–µ","BROWN")],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))
        // @ts-ignore
        return ctx.wizard.selectStep(4);
    } catch (e) {
        console.log(e)
    }
})

// 4
const getHeight = new Composer();
getHeight.action("start_again", to_start);
getHeight.on("callback_query", async (ctx) => {
    // @ts-ignore
    ctx.wizard.state.eyes = ctx.update.callback_query["data"];
    try {
        await ctx.replyWithHTML("<b>–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö. –ù–∞–ø—Ä–∏–º–µ—Ä: 183</b>",  Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(5);
    } catch (e) {
        console.log(e)
    }
})


// 5
const getNameStep = new Composer();
getNameStep.action("start_again", to_start)
getNameStep.on("text", async (ctx) => {
    try {
        if (ctx.message.text.split('.').length === 3) {
            // @ts-ignore
            ctx.wizard.state.date_of_birth = ctx.message.text.trim();
        } else {
            // @ts-ignore
            ctx.wizard.state.height = ctx.message.text;
        }
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –§–∞–º–∏–ª–∏—é –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ. –ü—Ä–∏–º–µ—Ä: <b>–ü—É—à–∫–∏–Ω –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –°–µ—Ä–≥–µ–µ–≤–∏—á</b>",  Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
        return ctx.wizard.selectStep(6);
    } catch (e) {
        console.log(e)
    }
})


// 6
const isRandomAll = new Composer();
isRandomAll.action("start", to_start);
isRandomAll.action("write_myself", async (ctx) => {
    // @ts-ignore
    if (ctx.update.callback_query["data"] === "write_myself") {
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ—Ç–µ –≥–æ—Ä–æ–¥, –≥–¥–µ —Ä–æ–¥–∏–ª–∏—Å—å. –ü—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(7);
    }
});
isRandomAll.action("random_data", random_data);
isRandomAll.action("generate_again", random_data);
isRandomAll.action("confirm", async (ctx) => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.id_code = id_code();
        // @ts-ignore
        ctx.wizard.state.passport_number = passport_number();
        // @ts-ignore
        ctx.wizard.state.national_driver_license = passport_number();
        await ctx.replyWithHTML(`–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ <b>–∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ <b>3:4</b>.
–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.
<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É <b>"—Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/compress images"</b>.
–ß—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ–º —Å—Ç–æ—Ä–æ–Ω 3—Ö4, –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–æ—Å—Ç–µ–π—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º, —Å–∫–∞—á–∞—Ç—å –µ–≥–æ –Ω–∞ –∞–Ω–¥—Ä–æ–∏–¥ –º–æ–∂–Ω–æ –ø–æ üëâ <a href='https://play.google.com/store/apps/details?id=com.arumcomm.cropimage'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>üëà
–¥–ª—è –∞–π—Ñ–æ–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤—ã –º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å 
–ø–æ üëâ <a href='https://apps.apple.com/ru/app/%D0%BE%D0%B1%D1%80%D0%B5%D0%B7%D0%BA%D0%B0-%D1%84%D0%BE%D1%82%D0%BE%D0%B3%D1%80%D0%B0%D1%84%D0%B8%D0%B9/id442008567'>—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ</a>üëà`,
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(15);
    } catch (e) {
        console.log(e)
    }
});
isRandomAll.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.last_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[0]).toUpperCase();
        // @ts-ignore
        ctx.wizard.state.first_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[1]).toUpperCase();
        // @ts-ignore
        ctx.wizard.state.second_name = cyrillicToTranslit.transform(ctx.message.text.split(" ")[2]).toUpperCase();

        await ctx.replyWithHTML("–ú—ã –º–æ–∂–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—É–Ω–∫—Ç—ã –∑–∞ –≤–∞—Å <b>—Å–ª—É—á–∞–π–Ω—ã–º–∏</b> –¥–∞–Ω–Ω—ã–º–∏", Markup.inlineKeyboard([
            [Markup.button.callback("üñã –ó–∞–ø–æ–ª–Ω—é —Å–∞–º","write_myself"), Markup.button.callback("üî£ –°–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "random_data") ],
            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
        ]))
    } catch (e) {
        console.log(e)
    }
})




// 7
const getCountryOfBirth = new Composer();
getCountryOfBirth.action("start_again", to_start);
getCountryOfBirth.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.city_of_birth = cyrillicToTranslit.transform(ctx.message.text.trim()).toUpperCase()
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É —Ä–æ–∂–¥–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>–†–æ—Å—Å–∏—è –∏–ª–∏ –°–°–°–† </b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)", "start_again")]
            ]))
        // @ts-ignore
        if(ctx.wizard.state.type === "ru_eu") {
            // @ts-ignore
            return ctx.wizard.selectStep(8);
        }
        // @ts-ignore
        if(ctx.wizard.state.type === "only_ru") {
            // @ts-ignore
            return ctx.wizard.selectStep(12);
        }
    } catch (e) {
        console.log(e)
    }
})

// 8
const getLivingStreet = new Composer();
getLivingStreet.action("start_again", to_start);
getLivingStreet.on("text", async (ctx) => {

    let country = ""
    try {
        if (ctx.message.text.trim().toLowerCase() === "—Ä–æ—Å—Å–∏—è") {
            country = "RUSSIA"
        } else if (ctx.message.text.trim().toLowerCase() === "—Å—Å—Å—Ä") {
            country = "USSR"
        } else {
            country = cyrillicToTranslit.transform(ctx.message.text).toUpperCase();
        }
        // @ts-ignore
        ctx.wizard.state.country_of_birth = country.toUpperCase();

        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ —É–ª–∏—Ü—É –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>—É–ª.–ì–∞–≥–∞—Ä–∏–Ω–∞</b>",
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
            ]))
        // @ts-ignore
        return ctx.wizard.selectStep(9);
    } catch (e) {
        console.log(e)
    }
})

// 9
const getHouseNumber = new Composer();
getHouseNumber.action("start_again", to_start);
getHouseNumber.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_street = cyrillicToTranslit.transform(ctx.message.text).toUpperCase()
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞. –ü—Ä–∏–º–µ—Ä: <b>34/2</b>")
        // @ts-ignore
        return ctx.wizard.selectStep(10);
    } catch (e) {
        console.log(e)
    }
})

// 10
const getLivingIndex = new Composer();
getLivingIndex.action("start_again", to_start);
getLivingIndex.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.house_number = ctx.message.text;
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å. –ü—Ä–∏–º–µ—Ä: <b>192168</b>")
        // @ts-ignore
        return ctx.wizard.selectStep(11);
    } catch (e) {
        console.log(e)
    }
})




// 11
const getLivingCity = new Composer();
getLivingCity.action("start_again", to_start);
getLivingCity.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_index = ctx.message.text.toUpperCase();
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>");
        // @ts-ignore
        return ctx.wizard.selectStep(13);
    } catch (e) {
        console.log(e)
    }
});

// 12
const getLivingCity_ru = new Composer();
getLivingCity_ru.on("text", async (ctx) => {
    try {
        let country = "";
        if (ctx.message.text.trim().toLowerCase() === "—Ä–æ—Å—Å–∏—è") {
            country = "RUSSIA";
        } else if (ctx.message.text.trim().toLowerCase() === "—Å—Å—Å—Ä") {
            country = "USSR";
        } else {
            country = cyrillicToTranslit.transform(ctx.message.text).toUpperCase();
        }
        // @ts-ignore
        ctx.wizard.state.country_of_birth = country;
        // @ts-ignore
        ctx.wizard.state.living_index = ctx.message.text.toUpperCase();
        await ctx.replyWithHTML("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: <b>–ú–æ—Å–∫–≤–∞</b>");
        // @ts-ignore
        return ctx.wizard.selectStep(13);
    } catch (e) {
        console.log(e)
    }
});
// 13
const getSubjectIdAndMakeSerialNumber = new Composer();
getSubjectIdAndMakeSerialNumber.action("start_again", to_start);
getSubjectIdAndMakeSerialNumber.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.living_city = cyrillicToTranslit.transform(ctx.message.text).toUpperCase();
        await ctx.replyWithHTML("–ù–∞–ø–∏—à–∏—Ç–µ –¥–≤—É–∑–Ω–∞—á–Ω—ã–π –ì–ò–ë–î–î-–∫–æ–¥ —Å—É–±—å–µ–∫—Ç–∞ –†–§, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –º–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º —à–∞–≥–µ.<a href='https://ru.wikipedia.org/wiki/%D0%9A%D0%BE%D0%B4%D1%8B_%D1%81%D1%83%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BE%D0%B2_%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B9%D1%81%D0%BA%D0%BE%D0%B9_%D0%A4%D0%B5%D0%B4%D0%B5%D1%80%D0%B0%D1%86%D0%B8%D0%B8'>–£–∑–Ω–∞—Ç—å –∫–æ–¥ –º–æ–∂–Ω–æ —Ç—É—Ç</a>")
        // @ts-ignore
        return ctx.wizard.selectStep(14);
    } catch (e) {
        console.log(e)
    }
})


// 14
const getApprove = new Composer();
getApprove.action("start_again", to_start);
getApprove.on("text", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.subject_id_number = ctx.message.text;
        // @ts-ignore
        ctx.wizard.state.subject_id = serial_number(ctx.message.text);
        // @ts-ignore
        const { type, first_name, last_name, second_name, date_of_birth, city_of_birth, house_number, subject_id, country_of_birth, living_index, living_country, living_city, living_street, sex, eyes, height} = ctx.wizard.state;
        // @ts-ignore
        console.log(ctx.wizard.state)
        // @ts-ignore
        if (type === "ru_eu"){
            console.log("ru_eu")
            await ctx.replyWithHTML(`<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
<b> –ò–º—è </b>: ${first_name.toUpperCase()}
<b> –§–∞–º–∏–ª–∏—è </b>: ${last_name.toUpperCase()}
<b> –û—Ç—á–µ—Å—Ç–≤–æ </b>: ${second_name.toUpperCase()}
<b> –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è </b>: ${date_of_birth}
<b> –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è </b>: ${country_of_birth.toUpperCase()}, ${city_of_birth.toUpperCase()}
<b> –ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è </b>: ${living_country.toUpperCase()}, ${living_city.toUpperCase()}, ${living_street.toUpperCase()}, ${house_number}, ${living_index.toUpperCase()}
<b> –ü–æ–ª </b>: ${sex.toUpperCase()}
<b> –¶–≤–µ—Ç –≥–ª–∞–∑ </b>: ${eyes.toUpperCase()}
<b> –†–æ—Å—Ç </b>: ${height}
<b> –ù–æ–º–µ—Ä —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏—è </b>:${subject_id}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å—ë –≤–µ—Ä–Ω–æ","right"),Markup.button.callback("‚ùå –ù–µ –≤–µ—Ä–Ω–æ","wrong") ]
                ])
            )
        } else {
            console.log("ru")
            // @ts-ignore
            await ctx.replyWithHTML(
                `<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:</b>
<b>–ò–º—è</b>: ${first_name.toUpperCase()}
<b>–§–∞–º–∏–ª–∏—è</b>: ${last_name.toUpperCase()}
<b>–û—Ç—á–µ—Å—Ç–≤–æ</b>: ${second_name.toUpperCase()}
<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: ${date_of_birth}
<b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è</b>: ${country_of_birth.toUpperCase()}, ${city_of_birth.toUpperCase()}
<b>–ú–µ—Å—Ç–æ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è</b>: ${living_country.toUpperCase()}, ${living_city.toUpperCase()}`,
                Markup.inlineKeyboard([
                    [Markup.button.callback("‚úî –í—Å—ë –≤–µ—Ä–Ω–æ","right"),Markup.button.callback("‚ùå –ù–µ –≤–µ—Ä–Ω–æ","wrong") ]
                ])
            )
        }
        // @ts-ignore
        return ctx.wizard.selectStep(15);
    } catch (e) {
        console.log(e)
    }
})


// 15
const getPhoto = new Composer();
getPhoto.action("start_again", to_start);

getPhoto.action("make_payment", async ctx => {
    try {
        await ctx.answerCbQuery("make_payment");
        await ctx.replyWithHTML("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", Markup.inlineKeyboard([
            [Markup.button.callback("–ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π","bank_card" )],
            [Markup.button.callback("Sberpay","sberbank" )],
        ]));
        // @ts-ignore
        return ctx.wizard.selectStep(16);
    } catch (e) {
        console.log(e)
    }

});

getPhoto.action("wrong", async ctx => {
    try {
        await ctx.answerCbQuery();
        await ctx.replyWithHTML("<b>–ß—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –Ω–∞—á–∞–ª—É –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ'</b>",
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]));
        // @ts-ignore
        return ctx.wizard.selectStep(0);
    } catch (e) {
        console.log(e)
    }
});

getPhoto.on("photo", async (ctx) => {

    const date = get_expire_date();
    console.log(date)
    // @ts-ignore
    ctx.wizard.state.rus_license_date = date;
    // @ts-ignore
    ctx.wizard.state.rus_license_exp_date = {
        dd: date["dd"],
        mm: date["mm"],
        yy: date["yy"] + 3
    };
    const client_signature = random_signature();
    // @ts-ignore
    ctx.wizard.state.client_signature = client_signature;
    const official_signature = random_signature();
    // @ts-ignore
    ctx.wizard.state.official_signature = official_signature;



    // @ts-ignore
    const picture = ctx.message.photo[2].file_id || ctx.message.photo[1].file_id || ctx.message.photo[0].file_id;
    console.log("picture " + picture)
    const fileUrl = await ctx.telegram.getFileLink(picture);
    console.log("fileUrl " + fileUrl)
    try {
        fs.stat(`/root/driveBot/temp/users/${ctx.message.chat.id}`, async (err) => {
            if (!err) {
                // console.log("–ø–∞–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
                await download_image(fileUrl.href, `/root/driveBot/temp/users/${ctx.message.chat.id}/${ctx.message.chat.id}.jpg`);
            } else if (err.code === 'ENOENT') {
                // console.log('–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç');
                fs.mkdir(`/root/driveBot/temp/users/${ctx.message.chat.id}`, async (err) => {
                    if (err)
                        throw err; // –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞–ø–∫—É
                    // console.log("–ø–∞–ø–∫—É —Å–æ–∑–¥–∞–ª")
                    await download_image(fileUrl.href, `/root/driveBot/temp/users/${ctx.message.chat.id}/${ctx.message.chat.id}.jpg`);
                });
            }
            // @ts-ignore
            if (ctx.message.from.username === "vansaal" || ctx.message.from.username === "DiduBaba" || "xeroxDoc_bot_support") {
                // @ts-ignore
                await convert_to_jpeg(ctx.wizard.state).then( async () => {
                    // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å E:///myProjects/driveBot/temp/users/${ctx.message.chat.id}/.jpg
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` });
                    // @ts-ignore
                    if (ctx.wizard.state.type === "ru_eu"){
                        // @ts-ignore
                        await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
                        // @ts-ignore
                        await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
                    }
                    await ctx.replyWithHTML(`–ï—Å–ª–∏ –æ–±—Ä–∞–∑—Ü—ã –≤—ã—à–ª–∏ —Ö–æ—Ä–æ—à–æ, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>. –í —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏. –ß—Ç–æ–±—ã üëâ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É`,
                        Markup.inlineKeyboard([
                            [Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å","make_payment"), Markup.button.callback("üé≠ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ","update_photo")],
                            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
                        ])
                    )
                });
            } else {
                // @ts-ignore
                await convert_to_jpeg(ctx.wizard.state, "example").then( async () => {
                    // –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å E:///myProjects/driveBot/temp/users/${ctx.message.chat.id}/.jpg
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
                    // @ts-ignore
                    await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` });
                    // @ts-ignore
                    if (ctx.wizard.state.type === "ru_eu"){
                        // @ts-ignore
                        await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
                        // @ts-ignore
                        await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.message.chat.id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
                    }
                    await ctx.replyWithHTML(`–ï—Å–ª–∏ –æ–±—Ä–∞–∑—Ü—ã –≤—ã—à–ª–∏ —Ö–æ—Ä–æ—à–æ, –∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>–û–ø–ª–∞—Ç–∏—Ç—å</b>. –í —Ç–µ—á–µ–Ω–∏–µ 1-5 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏. –ß—Ç–æ–±—ã üëâ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É`,
                        Markup.inlineKeyboard([
                            [Markup.button.callback("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å","make_payment"), Markup.button.callback("üé≠ –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ","update_photo")],
                            [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
                        ])
                    )
                });
            }
        });
    } catch (e) {
        console.log(e)
    }
});

getPhoto.action("right", async ctx => {
    try {
        await ctx.answerCbQuery();
        // @ts-ignore
        ctx.wizard.state.id_code = id_code();
        // @ts-ignore
        ctx.wizard.state.passport_number = passport_number();
        // @ts-ignore
        ctx.wizard.state.national_driver_license = passport_number();


        await ctx.replyWithHTML(`–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ <b>–∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ <b> —Å—Ç—Ä–æ–≥–æ 3:4</b>.
–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.
<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É <b>"—Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/compress images"</b>`,
            Markup.inlineKeyboard([
                [Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]
            ]))
    } catch (e) {
        console.log(e)
    }
});
getPhoto.action("update_photo", async (ctx) => {
    try {
        await ctx.replyWithHTML(`–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ <b>–∫–∞–∫ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã</b>, —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã –∫ –≤—ã—Å–æ—Ç–µ <b>3:4</b>.
–ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ñ–æ—Ç–æ 3—Ö4—Å–º, —Å—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω, –æ–±—Ä–µ–∂—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∫—Ä–∞—è–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ. –í —Ç–µ—á–µ–Ω–∏–µ –ø–∞—Ä—ã –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç –æ–±—Ä–∞–∑—Ü—ã.
<b>–í–Ω–∏–º–∞–Ω–∏–µ!</b>
–ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ —Å –∫–æ–º–ø—å—é—Ç–µ—Ä–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫—É <b>"—Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è/compress images"</b>`,
            Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]]))
        // @ts-ignore
    } catch (e) {
        console.log(e)
    }
});


// 16
const getCustomerEmail = new Composer();
getCustomerEmail.action("start_again", to_start);
getCustomerEmail.on("callback_query", async (ctx) => {
    try {
        // @ts-ignore
        ctx.wizard.state.payment_type = ctx.update.callback_query["data"];
        // @ts-ignore
        const payment_type = ctx.wizard.state.payment_type;
        await ctx.replyWithHTML("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–∏—Å–ª–∞—Ç—å –≤–∞–º —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ. <b>–ü—Ä–∏–º–µ—Ä</b>: example@mail.ru. <b>–í–∞–∂–Ω–æ!</b> –ï—Å–ª–∏ –ø–æ—á—Ç–∞ –±—É–¥–µ—Ç –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ–π–¥–µ—Ç.");
        // @ts-ignore
        const user_id = ctx.wizard.state.user_id;
        const order_data = {
            user_id,
            payment_type
        }


        // @ts-ignore
        await newDBconnect.addNewOrder(order_data);

        // @ts-ignore
        return ctx.wizard.selectStep(17);
    } catch (e) {
        console.log(e)
    }
});


// 17
const makePayment = new Composer();
makePayment.action("start_again", to_start);
makePayment.on("text", async (ctx) => {
    const checkout = new YooCheckout({ shopId: '959346', secretKey: 'live_Ov9tXrXrZAyBU840C2LbZnJbgFb58937zgoq65MazK4' });
    const idempotenceKey = uuidv4();
    let payment;
    // @ts-ignore
    let email = ctx.message.text.trim();

    try {
        // @ts-ignore
        switch (ctx.wizard.state.payment_type) {
            case "bank_card":
                payment = await checkout.createPayment(bank_card_payload(email), idempotenceKey);
                break;
            case "sberbank":
                payment = await checkout.createPayment(sberbank(email), idempotenceKey);
                break;
        }
        // @ts-ignore
        const payment_id = payment.id;
        // @ts-ignore
        ctx.wizard.state.payment_id = payment_id;
        // @ts-ignore
        await newDBconnect.updateOrder({key: "payment_id", value: ctx.wizard.state.payment_id});
        // @ts-ignore
        const confirmation_url = payment.confirmation.confirmation_url ? payment.confirmation.confirmation_url : 'empty';

        if (confirmation_url != null) {
            await ctx.replyWithHTML(confirmation_url, Markup.inlineKeyboard([[Markup.button.callback("üëâ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ (–∂–º–∏ –¥–≤–∞ —Ä–∞–∑–∞)","start_again")]])).then(async () => {
                let payment_result = await checkout.getPayment(payment_id);
                let counter = 0;
                async function getPayment() {
                    payment_result = await checkout.getPayment(payment_id);
                    if (payment_result.status === "succeeded") {
                        clearInterval(interval_id);
                        // @ts-ignore
                        await newDBconnect.updateOrder({key: "payment_status", value: "success"});
                        // @ts-ignore
                        await ctx.replyWithHTML("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞. –°–ø–∞—Å–∏–±–æ! –í —Ç–µ—á–µ–Ω–∏–∏ 5 –º–∏–Ω—É—Ç –≤–∞–º –ø—Ä–∏–¥—É—Ç —Ñ–∞–π–ª—ã –¥–ª—è –ø–µ—á–∞—Ç–∏.");
                        // @ts-ignore
                        await convert_to_jpeg(ctx.wizard.state).then( async () => {
                            // @ts-ignore
                            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.wizard.state.user_id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_1.jpg` });
                            // @ts-ignore
                            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.wizard.state.user_id}/–ü–æ–ª–Ω—ã–π_—Ä–∞–∑–≤–æ—Ä–æ—Ç_2.jpg` });
                            // @ts-ignore
                            await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.wizard.state.user_id}/–ö–æ—Ä–æ—Ç–∫–∞—è_–≤–µ—Ä—Å–∏—è.jpg` });
                            // @ts-ignore
                            if (ctx.wizard.state.type === "ru_eu"){
                                // @ts-ignore
                                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.wizard.state.user_id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_1.jpg` });
                                // @ts-ignore
                                await ctx.replyWithDocument({ source: `/root/driveBot/temp/users/${ctx.wizard.state.user_id}/–ï–≤—Ä–æ–ø–µ–π—Å–∫–∏–µ(–Ω–∞ –ø–ª–∞—Å—Ç–∏–∫)_2.jpg` });
                            }
                            await ctx.replyWithHTML(`üôè +100500 –≤ –∫–∞—Ä–º—É –∑–∞ –æ—Ç–∑—ã–≤, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç—É—Ç üëâ @xeroxDoc_bot_feedback üôè`)
                            // @ts-ignore
                            await newDBconnect.updateOrder({key: "status", value: "success"});
                        });
                    }
                    if (counter === 30 && payment_result.status !== "succeeded") {
                        clearInterval(interval_id);
                        // @ts-ignore
                        await newDBconnect.updateOrder({key: "status", value: "fail"});
                        // @ts-ignore
                        await newDBconnect.updateOrder({key: "payment_status", value: "fail"});
                        // @ts-ignore
                        await ctx.replyWithHTML("–ü–æ –∫–∞–∫–∏–º-—Ç–æ –ø—Ä–∏—á–∏–Ω–∞–º –æ–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø–æ—Å—Ç—É–ø–∏–ª–∞. " +
                            "–ï—Å–ª–∏ —É –≤–∞—Å —Å–ø–∏—Å–∞–ª–∏—Å—å —Å—Ä–µ–¥—Å—Ç–≤–∞, –Ω–æ —Ñ–∞–π–ª—ã –Ω–µ –ø—Ä–∏—à–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ 10 –º–∏–Ω—É—Ç, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–∞–∂–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É.", Markup.inlineKeyboard([
                            [Markup.button.callback("–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É","support" )],
                            [Markup.button.callback("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ","start_again" )],
                        ]));
                    }
                    counter++;
                }
                const interval_id = setInterval(getPayment, 20000);
            });
        }
    } catch (error) {
        console.error(error);
    }
})

const make_driver_license_scene = new Scenes.WizardScene(
    "make_driver_license_scene",
    chooseCountry,
    getDateOfBirthStep,
    getSex,
    getEyesColor,
    getHeight,
    getNameStep,
    isRandomAll,
    getCountryOfBirth,
    getLivingStreet,
    getHouseNumber,
    getLivingIndex,
    getLivingCity,
    getLivingCity_ru,
    getSubjectIdAndMakeSerialNumber,
    getApprove,
    getPhoto,
    getCustomerEmail,
    makePayment
)

export default make_driver_license_scene;